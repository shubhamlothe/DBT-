#include<bits/stdc++.h>
#define ASCII_SIZE 256
using namespace std;
char getMaxOcurringChar(char * str)
{
	int len = strlen(str);
	int max = 0;
	char result;
	
	for(int i = 0 ; i < len; i++){
	count[str[i]]++;
	if (max < count [str[i]]){
	max = count[str[i]]);
	result = str[i];
	}
     }
     return result;
}
int main()
{
	char str[] = "Shubham";
	cout << "Max ocurring char is: getMaxOcurringChar(str);
return 0;
}
	 
******************************************************************************************


#include <bits/stdc++.h> 
using namespace std; 
  
char *removeDuplicate(char str[], int n) 
{ 
   // Used as index in the modified string 
   int index = 0;    
     
   // Traverse through all characters 
   for (int i=0; i<n; i++) { 
         
     // Check if str[i] is present before it   
     int j;   
     for (j=0; j<i; j++)  
        if (str[i] == str[j]) 
           break; 
       
     // If not present, then add it to 
     // result. 
     if (j == i) 
        str[index++] = str[i]; 
   } 
     
   return str; 
} 
  
// Driver code 
int main() 
{ 
   char str[]= "geeksforgeeks"; 
   int n = sizeof(str) / sizeof(str[0]); 
   cout << removeDuplicate(str, n); 
   return 0; 
} 


*********************************************************************************

// C program to find first 
// non-repeating character 
#include <stdio.h> 
#include <stdlib.h> 
#define NO_OF_CHARS 256 
  
/* Returns an array of size 256 containg count 
   of characters in the passed char array */
int* getCharCountArray(char* str) 
{ 
    int* count = (int*)calloc( 
        sizeof(int), NO_OF_CHARS); 
    int i; 
    for (i = 0; *(str + i); i++) 
        count[*(str + i)]++; 
    return count; 
} 
  
/* The function returns index of first  
   non-repeating character in a string. If all  
   characters are repeating then returns -1 */
int firstNonRepeating(char* str) 
{ 
    int* count = getCharCountArray(str); 
    int index = -1, i; 
  
    for (i = 0; *(str + i); i++) { 
        if (count[*(str + i)] == 1) { 
            index = i; 
            break; 
        } 
    } 
  
    // To avoid memory leak 
    free(count); 
    return index; 
} 
  
/* Driver program to test above function */
int main() 
{ 
    char str[] = "geeksforgeeks"; 
    int index = firstNonRepeating(str); 
    if (index == -1) 
        printf("Either all characters are repeating or string is empty"); 
    else
        printf("First non-repeating character is %c", str[index]); 
    getchar(); 
    return 0; 
} 

******************************************************************************************************************

# include <iostream> 
using namespace std; 
# define NO_OF_CHARS 256 
  
class gfg 
{ 
    public : 
      
    /* Fills count array with 
    frequency of characters */
    void fillCharCounts(char *str, int *count) 
    { 
        int i; 
        for (i = 0; *(str + i); i++) 
        count[*(str + i)]++; 
    } 
  
    /* Print duplicates present  
    in the passed string */
    void printDups(char *str) 
    { 
        // Create an array of size 256 and fill 
        // count of every character in it 
        int *count = (int *)calloc(NO_OF_CHARS, sizeof(int)); 
        fillCharCounts(str, count); 
  
        // Print characters having count more than 0 
        int i; 
        for (i = 0; i < NO_OF_CHARS; i++) 
        if(count[i] > 1) 
            printf("%c, count = %d \n", i, count[i]); 
  
        free(count); 
    } 
}; 
  
/* Driver code*/
int main() 
{ 
    gfg g ; 
    char str[] = "test string"; 
    g.printDups(str); 
    //getchar(); 
    return 0; 
} 
  

****************************************************************************************

#include <bits/stdc++.h> 
using namespace std; 
  
// Function to count number of vowels, consonant,   
// digitsand special character in a string. 
void countCharacterType(string str) 
{ 
    // Declare the variable vowels, consonant, digit 
    // and special characters 
    int vowels = 0, consonant = 0, specialChar = 0,  
        digit = 0; 
  
    // str.length() function to count number of 
    // character in given string. 
    for (int i = 0; i < str.length(); i++) { 
           
        char ch = str[i]; 
  
        if ( (ch >= 'a' && ch <= 'z') ||  
              (ch >= 'A' && ch <= 'Z') ) { 
  
            // To handle upper case letters 
            ch = tolower(ch); 
  
            if (ch == 'a' || ch == 'e' || ch == 'i' || 
                ch == 'o' || ch == 'u') 
                vowels++; 
            else
                consonant++; 
        } 
        else if (ch >= '0' && ch <= '9') 
            digit++; 
        else
            specialChar++; 
    } 
    cout << "Vowels: " << vowels << endl; 
    cout << "Consonant: " << consonant << endl; 
    cout << "Digit: " << digit << endl; 
    cout << "Special Character: " << specialChar << endl; 
} 
  
// Driver function. 
int main() 
{ 
    string str = "geeks for geeks121"; 
    countCharacterType(str); 
    return 0; 
} 

*************************************************************************

// C++ program to replace spaces with %20 
#include<stdio.h> 
  
// Maximum length of string after modifications. 
const int MAX = 1000; 
  
// Replaces spaces with %20 in-place and returns 
// new length of modified string. It returns -1 
// if modified string cannot be stored in str[] 
int replaceSpaces(char str[]) 
{ 
    // count spaces and find current length 
    int space_count = 0, i; 
    for (i = 0; str[i]; i++) 
        if (str[i] == ' ') 
            space_count++; 
  
    // Remove trailing spaces 
    while (str[i-1] == ' ') 
    { 
       space_count--; 
       i--; 
    } 
  
    // Find new length. 
    int new_length = i + space_count * 2 + 1; 
  
    // New length must be smaller than length 
    // of string provided. 
    if (new_length > MAX) 
        return -1; 
  
    // Start filling character from end 
    int index = new_length - 1; 
  
    // Fill string termination. 
    str[index--] = '\0'; 
  
    // Fill rest of the string from end 
    for (int j=i-1; j>=0; j--) 
    { 
        // inserts %20 in place of space 
        if (str[j] == ' ') 
        { 
            str[index] = '0'; 
            str[index - 1] = '2'; 
            str[index - 2] = '%'; 
            index = index - 3; 
        } 
        else
        { 
            str[index] = str[j]; 
            index--; 
        } 
    } 
  
    return new_length; 
} 
  
// Driver code 
int main() 
{ 
    char str[MAX] = "Mr John Smith   "; 
  
    // Prints the replaced string 
    int new_length = replaceSpaces(str); 
    for (int i=0; i<new_length; i++) 
        printf("%c", str[i]); 
    return 0; 
} 

****************************************************************************

// C++ program to print all  
// permutations with duplicates allowed  
#include <bits/stdc++.h> 
using namespace std; 
  
  
// Function to print permutations of string  
// This function takes three parameters:  
// 1. String  
// 2. Starting index of the string  
// 3. Ending index of the string.  
void permute(string a, int l, int r)  
{  
    // Base case  
    if (l == r)  
        cout<<a<<endl;  
    else
    {  
        // Permutations made  
        for (int i = l; i <= r; i++)  
        {  
  
            // Swapping done  
            swap(a[l], a[i]);  
  
            // Recursion called  
            permute(a, l+1, r);  
  
            //backtrack  
            swap(a[l], a[i]);  
        }  
    }  
}  
  
// Driver Code  
int main()  
{  
    string str = "ABC";  
    int n = str.size();  
    permute(str, 0, n-1);  
    return 0;  
}  
******************************************************************************

/ A function to check if a string str is palindrome 
void isPalindrome(char str[]) 
{ 
    // Start from leftmost and rightmost corners of str 
    int l = 0; 
    int h = strlen(str) - 1; 
  
    // Keep comparing characters while they are same 
    while (h > l) 
    { 
        if (str[l++] != str[h--]) 
        { 
            printf("%s is Not Palindrome", str); 
            return; 
        } 
    } 
    printf("%s is palindrome", str); 
} 
  
// Driver program to test above function 
int main() 
{ 
    isPalindrome("abba"); 
    isPalindrome("abbccbba"); 
    isPalindrome("geeks"); 
    return 0; 
}

**********************************************************************************************

// C++ program to remove a particular character 
// from a string. 
#include <bits/stdc++.h> 
using namespace std; 
  
void removeChar(char *s, int c){ 
  
    int j, n = strlen(s); 
    for (int i=j=0; i<n; i++) 
       if (s[i] != c) 
          s[j++] = s[i]; 
      
    s[j] = '\0'; 
} 
  
int main() 
{ 
   char s[] = "geeksforgeeks"; 
   removeChar(s, 'g'); 
   cout << s; 
   return 0; 
} 

*********************************************************
